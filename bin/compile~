#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

if [ $STACK != "cedar-14" ]; then
	echo "Stack ${STACK} not supported" && exit 1
fi

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
: ${LIBUV_VERSION:="1.8.0"}
: ${CORE_BRANCH:="Sdk"}
: ${CORE_REL_VERSION:="rel-1.0.0"}
: ${CORE_VERSION:="latest"}

function print() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function export_env_dir() {
  local env_dir=$1
  local whitelist_regex=${2:-'(CORE_VERSION|LIBUV_VERSION|PROJECT|BUILD_DEBUG|CORE_BRANCH|CORE_REL_VERSION)$'}
  local blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

LD_DIR=`cd $(dirname $0); cd ..; pwd`
export_env_dir ${ENV_DIR}

# Create Cache Directory
mkdir -p ${CACHE_DIR}

# Create Source Directory
# If you compiled from build dirctory directly then dnu publish throws error due to directory name
# contains underscore '_'. dnu will not support
SRC_DIR=`mktemp -d`
# Move source code into temporary src dir
(
    shopt -s dotglob
    mv ${BUILD_DIR}/* ${SRC_DIR}
)
print "Build Dir Path: ${SRC_DIR}"

# Find project.json
PROJECT_JSON_FILES=$(find ${SRC_DIR}/. -maxdepth 3 -iname "project.json")
printf 'Found %s project.json files\n' $(echo "$PROJECT_JSON_FILES" | wc -l | tr -d ' ')
PROJECT_JSON_FILE=$(echo "$PROJECT_JSON_FILES" | head -1)

echo "CORE_BRANCH: ${CORE_BRANCH}"
echo "CORE_REL_VERSION: ${CORE_REL_VERSION}"
echo "CORE_VERSION: ${CORE_VERSION}"
CORE_DWLD_URL="https://dotnetcli.blob.core.windows.net/dotnet/${CORE_BRANCH}/${CORE_REL_VERSION}/dotnet-dev-ubuntu-x64.${CORE_VERSION}.tar.gz"

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"
APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"
print "Updating apt caches"
apt-get $APT_OPTIONS update | indent

PACKAGE_NAME="dotnet_sdk_ubuntu-x64.${CORE_VERSION}"
PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb
print "DotNet Core Sdk is downloading from : ${CORE_DWLD_URL}"
#curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $CORE_DWLD_URL 2>&1 | indent
mkdir -p "${BUILD_DIR}/dotnet"
curl ${CORE_DWLD_URL} -Ls | tar xz -C ${BUILD_DIR}/dotnet
ln -s ${BUILD_DIR}/dotnet ${HOME}
export PATH="${HOME}/dotnet:${PATH}"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}"
dotnet --version

print "DotNet Core Sdk Package Installation Starts"

mkdir -p ${BUILD_DIR}/.profile.d
cat <<EOF >${BUILD_DIR}/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

export PATH="${BUILD_DIR}/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="${BUILD_DIR}/.apt/usr/lib/x86_64-linux-gnu:${BUILD_DIR}/.apt/usr/lib/i386-linux-gnu:${BUILD_DIR}/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="${BUILD_DIR}/.apt/usr/lib/x86_64-linux-gnu:${BUILD_DIR}/.apt/usr/lib/i386-linux-gnu:${BUILD_DIR}/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="${BUILD_DIR}/.apt/usr/include:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="${BUILD_DIR}/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:${BUILD_DIR}/.apt/usr/lib/i386-linux-gnu/pkgconfig:${BUILD_DIR}/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LD_DIR/export"

# DNVM configuration starts
print "dnvm installation starts"
touch ${HOME}/.profile
curl -sSL https://raw.githubusercontent.com/aspnet/Home/${DNVM_BRANCH}/dnvminstall.sh | DNX_BRANCH=dev sh && source ${HOME}/.dnx/dnvm/dnvm.sh
dnvm

export DNVM_RUNTIME_LOCAL_CACHE="${HOME}/.dnx"
export DNVM_RUNTIME_CACHE_LOCATION="${CACHE_DIR}/dnx/runtimes"
mkdir -p ${DNVM_RUNTIME_LOCAL_CACHE}
mkdir -p ${DNVM_RUNTIME_CACHE_LOCATION}
export PATH="$DNVM_RUNTIME_LOCAL_CACHE:$DNVM_RUNTIME_CACHE_LOCATION:$PATH"
ln -s ${DNVM_RUNTIME_CACHE_LOCATION} ${DNVM_RUNTIME_LOCAL_CACHE}/runtimes

# DNX configuration
dnvm install $DNX_VERSION $DNVM_FLAGS -runtime coreclr -alias default
mkdir -p ${BUILD_DIR}/.dnx
cp -r ${HOME}/.dnx/* ${BUILD_DIR}/.dnx/
export DNVM_RUNTIME_TARGET_CACHE="${BUILD_DIR}/.dnx"
export PATH="$DNVM_RUNTIME_TARGET_CACHE:$PATH"

# DNX setting
DNX_VERSION=$(dnvm alias default)
#DNX_RUNTIME_LINK=`which dnx`
#export PATH="$DNX_RUNTIME_LINK:$PATH"

# app start up script
cat <<EOF > ${BUILD_DIR}/appstartup
#!/usr/bin/env bash
$HOME/approot/console
EOF
chmod 777 ${BUILD_DIR}/appstartup

# Create procfile
print "Procfile setting:-"
echo "console: ./appstartup" > ${BUILD_DIR}/Procfile

# DNU restore using project.json
print "dnu restore starts"
dnu restore ${DNU_FLAGS} ${PROJECT_JSON_FILE} --no-cache
print "dnu restore ended."

# DNU pulish using project.json
print "dnu publish starts."
dnu publish --out ${BUILD_DIR} ${DNU_FLAGS} --configuration Release ${PROJECT_JSON_FILE} --no-source --runtime ${DNX_VERSION}
print "dnu publish ended."
